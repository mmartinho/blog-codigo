********************************************* 
AVA: cursos.alura.com.br
Formação: 
Curso: Node.js e JWT: autenticação com tokens
Data Início: 09/04/2021
*********************************************

Capítulo 01: Protegendo as senhas no banco de dados
#hashing, #bcrypt  

1. Baixamos o pacote da aplicação incial em:
        >https://github.com/alura-cursos/blog-do-codigo/archive/aula-0.zip
2. Descompactamos e executamos o:
        >npm install 
   ...no diretório do projeto
3. Executamos o projeto:
        >npm start 
   ...e fizemos algumas requisições CRUD para testar
4. Instalamos a versão 3 do dcrypt:
        >npm install bcrypt@3.0.8
5. Acrescentamos a função gerarSenhaHash() em:
        @see src\usuarios\usuarios-modelo.js
   ...usando-a em um método adicionaSenha() para substituir a atribuição "tradicional" da senha,
   movendo a validação da senha para este método:
        @see src\usuarios\usuarios-modelo.js
6. Trocamos as propriedades do modelo, o DAO e as colunas do Usuário de "senha" para "senhaHash":
        @see src\usuarios\usuarios-modelo.js
        @see src\usuarios\usuarios-dao.js
        @see database.js
7. Usamos o método adicionaSenha() do modelo no controlador do usuário:
        @see src\usuarios\usuarios-controlador.js
   Tivemos que apagar a Base "db.sqlite" para que pudesse ser reconstruida com as novas definições
   em: 
        @see database.js

Capítulo 02: Criando um sistema de login escalável
#passport, #LocalStrategy, #nonSessionAuth

1. Instalamos os pacotes:
        >npm install passport@0.4.1
        >npm install passport-local@1.0.0
2. Criamos e estratégia de autenticação usando passport como Middleware:
        @see src\usuarios\estrategias-autenticacao.js
   ...exportando-a no barril da pasta usuarios:
        @see src\usuarios\index.js
3. Audicionamos o controlador de login de usuários:
        @see src\usuarios\usuarios-controlador.js
4. Criamos a rota de login:
        @see src\usuarios\usuarios-rotas.js

Capítulo 03: Implementando autenticação com JWT
#jwt, #webToken, #payload

1. Instalamos o pacote do JWT:
        >npm install jsonwebtoken@8.5.1
2. Adcionamos uma função para criar o token:
        @see src\usuarios\usuarios-controlador.js
   ...usando-a na função de login;
3. Executamos o seguinte comando para gerar uma senha secreta pra nossa função:
        >node -e "console.log(require('crypto').randomBytes(256).toString('base64'))"
4. Criamos um novo arquivo:
        @see .env
   ...colocando o resultado da chave gerada pelo comando anterior.
5. Instalamos o pacote dotenv:
        >npm install dotenv@8.2.0
   ...chamando-o em:
        @see server.js
6. Para usar na função a variável do arquivo que criamos anteriormente:
        @see src\usuarios\usuarios-controlador.js
   ...nos certificando que o .env esteja no .gitignore do projeto
7. Agora precisamos da estratégia de autenticação:
        >npm install passport-http-bearer@1.0.1
8. Adicionamos a estratégia de verificação de token no Middleware:
        @see src\usuarios\estrategias-autenticacao.js
   ...utilizando-a nas rotas:
        @see src\posts\posts-rotas.js
        @see src\usuarios\usuarios-rotas.js
9. Customizamos a estratégia Middleware de autenticação local:
        @see src\usuarios\middlewares-autenticacao.js
10. Customizamos a estratégia Middleware de autenticação bearer:
        @see src\usuarios\middlewares-autenticacao.js

Capítulo 04: Implementando o logout com tokens
#redis, #blacklist, #logout

1. Acrescentamos mais um parmetro ao jwt.sign da função criaTokenJWT em:
        @see src\usuarios\usuarios-controlador.js
   ...explicitando a expiração do token
2. Acrescentamos mais um if() de verificação de erro no bearer customizado:
        @see src\usuarios\middlewares-autenticacao.js
   ...para tratar os erros de token expirados
3. Instalamos o sistema "redis" via a URL:
        @see https://github.com/MSOpenTech/redis/releases/download/win-3.0.500/Redis-x64-3.0.500.msi
4. Instalamos o pacote do redis para o projeto:
        >npm install redis@3.0.2
5. Criamos a arquivo de inicialização do redis para armazernar a nossa blacklist:
        @see redis\blacklist.js
   ...chamando-o em no ponto de inicialização da app:
        @see server.js
6. Criamos o arquivo com as funções que manipulam (insere e consulta) a blacklist:
        @see redis\manipula-blaklist.js
7. Repassando o token a patir do middleware da estratégia de autenticação, passando pelo middleware da autenticação bearer,
   e chegando no controlador, inserimos a função logout:
        @see src\usuarios\usuarios-controlador.js
8. Inserimos a rota de logout na lista de rotas dos usuários:
        @see src\usuarios\usuarios-rotas.js
9. Inserimos mais uma função para verificação de token na blacklist
        @see src\usuarios\estrategias-autenticacao.js
   ...usando-a na instncia da estratégia Bearer
